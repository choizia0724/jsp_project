{"version":3,"sources":["raw-js/kendo.chat.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendochat","js","this","$","undefined$1","kendo","window","Widget","ui","extend","NS","keys","ChatMessageBox","init","element","options","fn","call","_wrapper","_attachEvents","_typing","events","messages","placeholder","toggleButton","sendButton","destroy","input","off","remove","empty","styles","inputId","guid","inputWrapper","addClass","appendTo","attr","inputSuffix","toolbar","toggleable","buttons","length","html","renderButton","buttonToggle","toolbarId","icon","buttonToggleIcon","fillMode","size","buttonSend","buttonSendIcon","on","_keydown","bind","_input","_inputFocusout","_buttonClick","_toggleToolbar","start","val","_triggerTyping","e","keyCode","ENTER","preventDefault","_sendMessage","F10","trigger","value","args","text","ev","originalEvent","button","buttonFlat","iconButton","buttonIcon","hidden","chat","jQuery","DATA_K_BUTTON_NAME","SCROLL_LEFT_NAME","SCROLL_RIGHT_NAME","VISIBLE","TABINDEX","DEFAULT_ANIMATION","effects","duration","NO_ANIMATION","expand","show","collapse","hide","ChatToolBar","toolbarOptions","name","buttonsDefined","_createButtonList","scrollable","buttonsWidth","width","_initScrolling","_setupAnimation","toggle","_onClick","_onKeydown","buttonList","i","_createButton","append","first","removeAttr","btnOptions","attributes","buttonElm","title","type","tabindex","data","buttonDefaults","iconClass","prepend","renderIcon","target","closest","is","scrollButton","_scrolling","_scroll","key","LEFT","_focusButton","RIGHT","dir","current","not","candidate","index","removeAttribute","focus","scrollButtonLeft","scrollButtonLeftIcon","class","scrollButtonRight","scrollButtonRightIcon","_refreshScrollButtons","commandName","that","buttonWidth","maxScrollSize","scrollAmmount","scrollValue","currentScrollLeft","Math","min","max","scrollLeft","isNaN","parseInt","animation","defaultExpandAnimation","defaultCollapseAnimation","reverse","_animationComplete","_animationCompleteExpand","round","scrollWidth","clientWidth","children","last","outerWidth","skipAnimation","complete","kendoStop","kendoAnimate","encode","htmlEncode","DOT","AVATAR_TEMPLATE","url","IMG_TEMPLATE","MESSAGE_GROUP_TEMPLATE","messageGroup","noAvatar","author","SELF_MESSAGE_GROUP_TEMPLATE","TEXT_MESSAGE_TEMPLATE","timestamp","message","messageTime","toString","parseDate","bubble","TYPING_INDICATOR_TEMPLATE","messageListContent","typingIndicatorBubble","typingIndicator","CARD_ACTIONS_TEMPLATE","cardActions","cardActionsVertical","map","cardAction","buttonPrimary","CARD_ACTION_BUTTON_TEMPLATE","join","HERO_CARD_TEMPLATE","images","subtitle","card","cardRich","alt","cardMedia","HERO_IMG_TEMPLATE","cardBody","cardTitle","cardSubtitle","Templates","Components","registerTemplate","templateName","template","getTemplate","suggestedActions","action","suggestedAction","SUGGESTED_ACTION_TEMPLATE","registerComponent","componentName","component","getComponent","Component","Class","view","Calendar","kendoCalendar","change","viewStyles","wrapper","messageList","only","middle","avatar","scrollButtonIconLeft","scrollButtonIconRight","cardWrapper","cardDeckScrollWrap","cardDeck","cardList","cardActionsHorizontal","cardActionsStart","cardActionsCenter","cardActionsEnd","cardActionsStretched","selected","ChatView","_list","_lastSender","typingParticipants","_scrollable","isTyping","areTyping","and","_scrollDraggable","list","messageListLabel","_listClick","_messageClick","_suggestedActionClick","_cardActionClick","_suggestedActionKeydown","_scrollButtonClick","currentTarget","scrollToLeft","find","scrollContainer","siblings","cardWidth","renderMessage","sender","Date","bubbleElement","_renderTemplate","_renderBubble","_removeTypingParticipant","id","renderSuggestedActions","_removeSuggestedActions","_scrollToBottom","renderAttachments","_renderAttachmentWrapper","attachmentLayout","cardContainer","attachments","cardElement","contentType","content","_removeTypingIndicator","renderComponent","layout","buttonLeft","_renderScrollButton","buttonRight","directionClass","targetElement","hasClass","parents","_clearSelection","SPACEBAR","messageType","group","_getMessageGroup","_appendToGroup","componentType","templateOptions","_getMessageGroupTemplate","appendTarget","iconUrl","user","messageElement","childrenCount","filter","removeClass","_renderTypingIndicator","participants","indicator","_addTypingParticipant","_composeTypingParticipantsText","found","push","splice","typingAction","typingText","replace","trimRight","selectedClass","scrollTop","prop","chatStyles","canvas","viewWrapper","messageBoxWrapper","toolbarBoxWrapper","Chat","_events","_user","_view","_toolbar","_messageBox","notify","setOptions","_setEvents","messageBox","unbind","_resetToolbarButtons","getUser","height","uiElements","toolbarElement","css","postMessage","toggleToolbar","postArgs","from","renderUserTypingIndicator","clearUserTypingIndicator","removeTypingIndicator","plugin"],"mappings":"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","file":"kendo.chat.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.html.button.js'), require('kendo.icons.js'), require('kendo.draganddrop.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.html.button', 'kendo.icons', 'kendo.draganddrop'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendochat = global.kendochat || {}, global.kendochat.js = factory()));\n})(this, (function () {\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var NS = \".kendoChat\";\n        var keys = kendo.keys;\n\n        var messageBoxStyles = {\n            input: \"k-input-inner\",\n            inputWrapper: \"k-textbox k-input k-input-lg k-input-solid\",\n            button: \"k-button\",\n            buttonFlat: \"k-button-lg k-button-flat k-button-flat-base\",\n            iconButton: \"k-icon-button\",\n            buttonIcon: \"k-button-icon\",\n            buttonSend: \"k-chat-send\",\n            buttonSendIcon: \"paper-plane\",\n            buttonToggle: \"k-button-toggle\",\n            buttonToggleIcon: \"more-horizontal\",\n            hidden: \"k-hidden\",\n            inputSuffix: \"k-input-suffix\"\n        };\n\n        var ChatMessageBox = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this._wrapper();\n\n                this._attachEvents();\n\n                this._typing = false;\n            },\n\n            events: [\n                \"focusToolbar\",\n                \"sendMessage\",\n                \"toggleToolbar\",\n                \"typingEnd\",\n                \"typingStart\"\n            ],\n\n            options: {\n                messages: {\n                    placeholder: \"Type a message...\",\n                    toggleButton: \"Toggle toolbar\",\n                    sendButton: \"Send message\"\n                }\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this.input) {\n                    this.input.off(NS);\n                    this.input.remove();\n                    this.input = null;\n                }\n\n                this.element.off(NS);\n                this.element.empty();\n            },\n\n            _wrapper: function() {\n                var styles = ChatMessageBox.styles;\n                var options = this.options;\n                var messages = options.messages;\n                var inputId = \"inputId_\" + kendo.guid();\n\n                this.inputWrapper = this.element\n                    .addClass(styles.inputWrapper)\n                    .appendTo(this.element);\n\n                this.input = $(\"<input type='text'>\")\n                    .addClass(styles.input)\n                    .attr(\"id\", inputId)\n                    .attr(\"aria-label\", messages.placeholder)\n                    .attr(\"placeholder\", messages.placeholder)\n                    .appendTo(this.inputWrapper);\n\n                this.inputSuffix = $(\"<span></span>\")\n                    .addClass(styles.inputSuffix)\n                    .appendTo(this.inputWrapper);\n\n                if (options.toolbar && options.toolbar.toggleable && options.toolbar.buttons && options.toolbar.buttons.length) {\n                    $(kendo.html.renderButton(`<button class=\"${styles.buttonToggle}\" title=\"${messages.toggleButton}\" aria-label=\"${messages.toggleButton}\" aria-controls=\"${options.toolbarId}\"></button>`,\n                        {\n                            icon: styles.buttonToggleIcon,\n                            fillMode: \"flat\",\n                            size: \"large\"\n                        }))\n                    .appendTo(this.inputSuffix);\n                }\n\n                $(kendo.html.renderButton(`<button class=\"${styles.buttonSend}\" title=\"${messages.sendButton}\" aria-label=\"${messages.sendButton}\"></button>`,\n                    {\n                        icon: styles.buttonSendIcon,\n                        fillMode: \"flat\",\n                        size: \"large\"\n                    }))\n                .appendTo(this.inputSuffix);\n            },\n\n            _attachEvents: function() {\n                var styles = ChatMessageBox.styles;\n\n                this.input\n                    .on(\"keydown\" + NS, this._keydown.bind(this))\n                    .on(\"input\" + NS, this._input.bind(this))\n                    .on(\"focusout\" + NS, this._inputFocusout.bind(this));\n\n                this.element\n                    .on(\"click\" + NS, DOT + styles.buttonSend, this._buttonClick.bind(this));\n\n                this.element\n                    .on(\"click\" + NS, DOT + styles.buttonToggle, this._toggleToolbar.bind(this));\n            },\n\n            _input: function() {\n                var currentValue = this.input.val();\n                var start = currentValue.length > 0;\n\n                this._triggerTyping(start);\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n\n                switch (key) {\n                    case keys.ENTER:\n                        e.preventDefault();\n\n                        this._sendMessage();\n                        break;\n                    case keys.F10:\n                        e.preventDefault();\n\n                        this.trigger(\"focusToolbar\");\n                        break;\n                }\n            },\n\n            _buttonClick: function(e) {\n                e.preventDefault();\n\n                this._sendMessage();\n            },\n\n            _sendMessage: function() {\n                var value = this.input.val();\n\n                if (!value.length) {\n                    return;\n                }\n\n                this._triggerTyping(false);\n\n                var args = {\n                    text: value\n                };\n\n                this.trigger(\"sendMessage\", args);\n\n                this.input.val(\"\");\n            },\n\n            _inputFocusout: function() {\n                this._triggerTyping(false);\n            },\n\n            _triggerTyping: function(start) {\n                if (start) {\n                    if (!this._typing) {\n                        this.trigger(\"typingStart\", {});\n                        this._typing = true;\n                    }\n                } else {\n                    if (this._typing) {\n                        this.trigger(\"typingEnd\", {});\n                        this._typing = false;\n                    }\n                }\n            },\n\n            _toggleToolbar: function(ev) {\n                this.trigger(\"toggleToolbar\", { originalEvent: ev });\n            }\n        });\n\n        extend(true, ChatMessageBox, { styles: messageBoxStyles });\n        extend(kendo, {\n            chat: {\n                ChatMessageBox: ChatMessageBox\n            }\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var NS = \".kendoChat\";\n\n        var DATA_K_BUTTON_NAME = \"kButtonName\";\n        var SCROLL_LEFT_NAME = \"chatToolbarScrollLeft\";\n        var SCROLL_RIGHT_NAME = \"chatToolbarScrollRight\";\n        var VISIBLE = \":visible\";\n        var TABINDEX = \"tabindex\";\n\n        var DEFAULT_ANIMATION = {\n            effects: \"expand:vertical\",\n            duration: 200\n        };\n        var NO_ANIMATION = {\n            expand: {\n                show: true\n            },\n            collapse: {\n                hide: true\n            }\n        };\n\n        var toolbarStyles = {\n            button: \"k-button\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n            buttonList: \"k-button-list k-toolbar-group\",\n            scrollButton: \"k-scroll-button\",\n            scrollButtonLeft: \"k-scroll-button-left\",\n            scrollButtonRight: \"k-scroll-button-right\",\n            scrollButtonLeftIcon: \"chevron-left\",\n            scrollButtonRightIcon: \"chevron-right\",\n            iconButton: \"k-icon-button\"\n        };\n\n        var ChatToolBar = Widget.extend({\n            init: function(element, options) {\n                options = extend({}, options, { name: \"ChatToolbar\" });\n                var toolbarOptions = options.toolbar;\n                var buttonsDefined = toolbarOptions.buttons && toolbarOptions.buttons.length;\n\n                Widget.fn.init.call(this, element, options);\n\n                if (buttonsDefined) {\n                    this._createButtonList();\n                }\n\n                if (buttonsDefined && toolbarOptions.scrollable &&\n                        this.buttonsWidth() > this.element.width()) {\n                    this._initScrolling();\n                }\n\n                this._setupAnimation();\n\n                if (buttonsDefined && toolbarOptions.toggleable) {\n                    this.toggle(true);\n                }\n\n                this.element\n                    .on(\"click\" + NS, this._onClick.bind(this))\n                    .on(\"keydown\" + NS, this._onKeydown.bind(this));\n            },\n\n            events: [\n                \"click\"\n            ],\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.element.off(NS);\n                this.element.empty();\n            },\n\n            _createButtonList: function() {\n                var that = this;\n                var styles = ChatToolBar.styles;\n                var buttons = that.options.toolbar.buttons;\n                var buttonList = $(\"<div class='\" + styles.buttonList + \"'></div>\");\n\n                for (var i = 0; i < buttons.length; i++) {\n                    var button = that._createButton(buttons[i]);\n                    buttonList.append(button);\n                }\n\n                buttonList.appendTo(this.element);\n\n                this.buttonList = buttonList;\n                this.buttons().first().removeAttr(TABINDEX);\n            },\n\n            _createButton: function(btnOptions) {\n                var styles = ChatToolBar.styles;\n                var buttonElm = $(\"<button>\");\n                var attributes;\n\n                if (typeof btnOptions === \"string\") {\n                    btnOptions = {\n                        name: btnOptions\n                    };\n                }\n\n                attributes = $.extend({}, btnOptions.attr || {}, {\n                    title: btnOptions.text || btnOptions.name,\n                    \"aria-label\": btnOptions.text || btnOptions.name,\n                    type: \"button\",\n                    tabindex: -1\n                });\n\n                buttonElm\n                    .attr(attributes)\n                    .addClass(btnOptions.name)\n                    .data(DATA_K_BUTTON_NAME, btnOptions.name)\n                    .addClass(styles.button)\n                    .addClass(styles.buttonDefaults);\n\n                if (btnOptions.icon || btnOptions.iconClass) {\n                    buttonElm.addClass(styles.iconButton);\n                    buttonElm.prepend(kendo.html.renderIcon({ icon: btnOptions.icon, iconClass: \"k-button-icon\" + (btnOptions.iconClass ? ` ${btnOptions.iconClass}` : \"\") }));\n                }\n\n                return buttonElm;\n            },\n\n            _onClick: function(ev) {\n                var styles = ChatToolBar.styles;\n                var target = $(ev.target).closest(DOT + styles.button);\n\n                if (target.is(DOT + styles.scrollButton) && !this._scrolling) {\n                    this._scroll(target.data(DATA_K_BUTTON_NAME));\n                }\n\n                if (target.data(DATA_K_BUTTON_NAME)) {\n                    this.buttons().attr(TABINDEX, -1);\n                    target.removeAttr(TABINDEX);\n\n                    this.trigger(\"click\", {\n                        button: target[0],\n                        name: target.data(DATA_K_BUTTON_NAME),\n                        originalEvent: ev\n                    });\n                }\n            },\n\n            _onKeydown: function(e) {\n                var key = e.keyCode,\n                    keys = kendo.keys;\n\n                switch (key) {\n                    case keys.LEFT:\n                        this._focusButton(-1);\n                        break;\n                    case keys.RIGHT:\n                        this._focusButton(1);\n                        break;\n                }\n            },\n\n            _focusButton: function(dir) {\n                var buttons = this.buttons(),\n                    current = buttons.not(\"[tabindex=-1]\"),\n                    candidateIndex = current.index() + dir,\n                    candidate = buttons[candidateIndex];\n\n                if (candidate) {\n                    current.attr(TABINDEX, -1);\n                    candidate.removeAttribute(TABINDEX);\n                    candidate.focus();\n                }\n            },\n\n            _initScrolling: function() {\n                var styles = ChatToolBar.styles;\n\n                this.scrollButtonLeft = this._createButton({\n                    name: SCROLL_LEFT_NAME,\n                    icon: styles.scrollButtonLeftIcon,\n                    attr: {\n                        \"class\": styles.scrollButton + \" \" + styles.scrollButtonLeft\n                    }\n                });\n\n                this.scrollButtonRight = this._createButton({\n                    name: SCROLL_RIGHT_NAME,\n                    icon: styles.scrollButtonRightIcon,\n                    attr: {\n                        \"class\": styles.scrollButton + \" \" + styles.scrollButtonRight\n                    }\n                });\n\n                this.element.prepend(this.scrollButtonLeft);\n                this.element.append(this.scrollButtonRight);\n                this._refreshScrollButtons();\n\n                this.element.on(\"keydown\" + NS, this._refreshScrollButtons.bind(this));\n            },\n\n            _scroll: function(commandName) {\n                var that = this;\n                var buttonWidth = that.buttonWidth();\n                var maxScrollSize = this.maxScrollSize();\n                var scrollAmmount = commandName === SCROLL_LEFT_NAME ? buttonWidth * -1 : buttonWidth;\n                var currentScroll = this.currentScrollLeft();\n                var scrollValue = currentScroll + scrollAmmount;\n                scrollValue = Math.min(Math.max(scrollValue, 0), maxScrollSize);\n\n                if (commandName !== SCROLL_LEFT_NAME && commandName !== SCROLL_RIGHT_NAME) {\n                    return;\n                }\n\n                kendo.scrollLeft(that.buttonList, scrollValue);\n                that._refreshScrollButtons(scrollValue);\n            },\n\n            _refreshScrollButtons: function(value) {\n                var maxScrollSize = this.maxScrollSize();\n                var currentScrollLeft = value === undefined$1 || isNaN(parseInt(value, 10)) ? this.currentScrollLeft() : value;\n\n                if (!this.scrollButtonLeft && !this.scrollButtonRight) {\n                    return;\n                }\n\n                this.scrollButtonLeft.toggle(currentScrollLeft !== 0);\n                this.scrollButtonRight.toggle(currentScrollLeft !== maxScrollSize);\n            },\n\n            _setupAnimation: function() {\n                var animation = this.options.toolbar.animation;\n                var defaultExpandAnimation = extend({}, DEFAULT_ANIMATION);\n                var defaultCollapseAnimation = extend({\n                    reverse: true,\n                    hide: true\n                }, DEFAULT_ANIMATION);\n\n                if (animation === false) {\n                    animation = extend(true, {}, NO_ANIMATION);\n                } else {\n                    animation = extend(true, {\n                        expand: defaultExpandAnimation,\n                        collapse: defaultCollapseAnimation\n                    }, animation);\n                }\n\n                this.options.toolbar.animation = animation;\n            },\n\n            _animationComplete: function() {\n                this._refreshScrollButtons();\n            },\n\n            _animationCompleteExpand: function() {\n                this._animationComplete();\n                this.buttons().not(\"[tabindex=-1]\").trigger(\"focus\");\n            },\n\n            currentScrollLeft: function() {\n                return Math.round(kendo.scrollLeft(this.buttonList));\n            },\n\n            maxScrollSize: function() {\n                return Math.round(this.buttonList[0].scrollWidth - this.buttonList[0].clientWidth);\n            },\n\n            buttons: function() {\n                var styles = ChatToolBar.styles;\n                return this.buttonList ? this.buttonList.children(DOT + styles.button) : null;\n            },\n\n            buttonWidth: function() {\n                return Math.round(this.buttons().last().outerWidth(true));\n            },\n\n            buttonsWidth: function() {\n                var width = 0;\n\n                if (this.buttons()) {\n                    width = this.buttonWidth() * this.buttons().length;\n                }\n\n                return width;\n            },\n\n            toggle: function(skipAnimation) {\n                var animation = this.options.toolbar.animation;\n\n                if (skipAnimation) {\n                    animation = extend(true, {}, NO_ANIMATION);\n                }\n\n                animation.expand.complete = this._animationCompleteExpand.bind(this);\n                animation.collapse.complete = this._animationComplete.bind(this);\n\n                if (this.element.is(VISIBLE)) {\n                    this.element.kendoStop().kendoAnimate(animation.collapse);\n                } else {\n                    this.element.kendoStop().kendoAnimate(animation.expand);\n                }\n\n            },\n\n            focus: function() {\n                if (!this.element.is(VISIBLE)) {\n                    this.toggle();\n                } else {\n                    this.buttons().not(\"[tabindex=-1]\").trigger(\"focus\");\n                }\n            }\n        });\n\n        extend(true, ChatToolBar, { styles: toolbarStyles });\n        extend(kendo.chat, {\n            ChatToolBar: ChatToolBar\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var encode = kendo.htmlEncode;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var SPACE = \" \";\n        var NS = \".kendoChat\";\n\n        var IMG_TEMPLATE = ({ url, text, styles }) => `<img src=\"${url}\" alt=\"${encode(text)}\">`;\n\n        var AVATAR_TEMPLATE = ({ url, text, styles }) => `<div class=\"k-avatar k-avatar-md k-avatar-solid k-avatar-solid-primary k-rounded-full\">` +\n                                    `<span class=\"k-avatar-image\">` +\n                                        IMG_TEMPLATE({ url, text, styles }) +\n                                    `</span>` +\n                                `</div>`;\n\n        var MESSAGE_GROUP_TEMPLATE = ({ text, url, styles }) => `<div ${encode(text)} class=\"${styles.messageGroup} ${ url ? \"\" : styles.noAvatar }\">\n            <p class=\"${styles.author}\">${encode(text)}</p>\n            ${ url ? AVATAR_TEMPLATE({ url, text, styles }) : '' }\n        </div>`;\n\n        var SELF_MESSAGE_GROUP_TEMPLATE = ({ url, text, styles }) => `<div me class=\"${styles.messageGroup} ${styles.self} ${ url ? \"\" : styles.noAvatar }\">\n        ${ url ? AVATAR_TEMPLATE({ url, text, styles }) : '' }\n    </div>`;\n\n        var TEXT_MESSAGE_TEMPLATE = ({ styles, text, timestamp }) => `<div class=\"${styles.message}\">\n        <time class=\"${styles.messageTime}\">${ kendo.toString(kendo.parseDate(timestamp), \"HH:mm:ss\") }</time>\n        <div class=\"${styles.bubble}\">${encode(text)}</div>\n    </div>`;\n\n        var TYPING_INDICATOR_TEMPLATE = ({ styles, text }) => `<div class=\"${styles.messageListContent} ${styles.typingIndicatorBubble}\">\n        <p class=\"${styles.author}\">${encode(text)}</p>\n        <div class=\"${styles.message}\">\n            <div class=\"${styles.bubble}\">\n                <div class=\"${styles.typingIndicator}\">\n                    <span></span><span></span><span></span>\n                </div>\n            </div>\n        </div>\n    </div>`;\n\n        var SUGGESTED_ACTION_TEMPLATE = ({ styles, action }) => `<span role=\"button\" tabindex=\"0\" class=\"${styles.suggestedAction}\" data-value=\"${encode(action.value)}\">${encode(action.title)}</span>`;\n\n        var SUGGESTED_ACTIONS_TEMPLATE = ({ styles, suggestedActions }) => `<div class=\"${styles.suggestedActions}\">\n        ${ suggestedActions.map(action => SUGGESTED_ACTION_TEMPLATE({ styles, action })).join('') }\n    </div>`;\n\n        var HERO_IMG_TEMPLATE = ({ images, styles }) => `<img src=\"${encode(images[0].url)}\" alt=\"${images[0].alt}\" class=\"${styles.cardMedia}\" />`;\n\n        var CARD_ACTION_BUTTON_TEMPLATE = ({ button, styles }) => `<span class=\"${styles.cardAction}\"><button class=\"${styles.button} ${styles.buttonPrimary}\" data-value=\"${encode(button.value)}\"><span class=\"k-button-text\">${encode(button.title)}</span></button></span>`;\n\n        var CARD_ACTIONS_TEMPLATE = ({ styles, buttons }) => `<div class=\"k-actions ${styles.cardActions} ${styles.cardActionsVertical}\">\n        ${ buttons.map((button) => CARD_ACTION_BUTTON_TEMPLATE({ styles, button })).join('') }\n    </div>`;\n\n        var HERO_CARD_TEMPLATE = ({ styles, images, buttons, title, subtitle, text }) => `<div class=\"${styles.card} ${styles.cardRich}\">\n        ${ (typeof images !== \"undefined\" && images.length > 0) ? HERO_IMG_TEMPLATE({ images, styles }) : '' }\n        <div class=\"${styles.cardBody}\">\n            ${ typeof title !== \"undefined\" ? (() => `<h5 class=\"${styles.cardTitle}\">${encode(title)}</h5>`)() : '' }\n            ${ typeof subtitle !== \"undefined\" ? (() => `<h6 class=\"${styles.cardSubtitle}\">${encode(subtitle)}</h6>`)() : '' }\n            ${ typeof text !== \"undefined\" ? (() => `<p>${encode(text)}</p>`)() : '' }\n        </div>\n        ${ (typeof buttons !== \"undefined\" && buttons.length > 0) ? CARD_ACTIONS_TEMPLATE({ buttons, styles }) : ''}\n    </div>`;\n\n        extend(kendo.chat, {\n            Templates: {},\n            Components: {}\n        });\n\n        kendo.chat.registerTemplate = function(templateName, template) {\n            kendo.chat.Templates[templateName] = kendo.template(template);\n        };\n\n        kendo.chat.getTemplate = function(templateName) {\n            return kendo.chat.Templates[templateName] || TEXT_MESSAGE_TEMPLATE;\n        };\n\n        kendo.chat.registerTemplate(\"text\", TEXT_MESSAGE_TEMPLATE);\n        kendo.chat.registerTemplate(\"message\", TEXT_MESSAGE_TEMPLATE);\n        kendo.chat.registerTemplate(\"typing\", TYPING_INDICATOR_TEMPLATE);\n        kendo.chat.registerTemplate(\"suggestedAction\", SUGGESTED_ACTIONS_TEMPLATE);\n        kendo.chat.registerTemplate(\"heroCard\", HERO_CARD_TEMPLATE);\n        kendo.chat.registerTemplate(\"application/vnd.microsoft.card.hero\", HERO_CARD_TEMPLATE);\n\n        kendo.chat.registerComponent = function(componentName, component) {\n            kendo.chat.Components[componentName] = component;\n        };\n\n        kendo.chat.getComponent = function(componentName) {\n            return kendo.chat.Components[componentName] || null;\n        };\n\n        var Component = kendo.chat.Component = kendo.Class.extend({\n            init: function(options, view) {\n                this.element = $('<div></div>');\n                this.options = options;\n                this.view = view;\n            },\n\n            destroy: function() {\n                kendo.destroy(this.element);\n            }\n        });\n\n        var Calendar = Component.extend({\n            init: function(options, view) {\n                Component.fn.init.call(this, options, view);\n\n                this.element.kendoCalendar({\n                    change: function() {\n                        view.trigger(\"suggestedAction\", { text: kendo.toString(this.value(), 'd'), type: \"message\" });\n                    }\n                });\n            },\n\n            destroy: function() {\n            }\n        });\n        kendo.chat.registerComponent(\"calendar\", Calendar);\n\n        var viewStyles = {\n            wrapper: \"k-chat\",\n            messageList: \"k-avatars\",\n            messageListContent: \"k-message-list-content\",\n            messageTime: \"k-message-time\",\n            messageGroup: \"k-message-group\",\n            message: \"k-message\",\n            only: \"k-only\",\n            first: \"k-first\",\n            middle: \"k-middle\",\n            last: \"k-last\",\n            author: \"k-author\",\n            avatar: \"k-avatar\",\n            noAvatar: \"k-no-avatar\",\n            self: \"k-alt\",\n            button: \"k-button\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n            iconButton: \"k-icon-button\",\n            buttonIcon: \"k-button-icon\",\n            buttonPrimary: \"k-button-md k-rounded-md k-button-flat k-button-flat-primary\",\n            scrollButtonIconLeft: \"chevron-left\",\n            scrollButtonIconRight: \"chevron-right\",\n            typingIndicator: \"k-typing-indicator\",\n            typingIndicatorBubble: \"k-typing-indicator-bubble\",\n            bubble: \"k-chat-bubble\",\n            suggestedActions: \"k-quick-replies\",\n            suggestedAction: \"k-quick-reply\",\n            cardWrapper: \"k-card-container\",\n            cardDeckScrollWrap: \"k-card-deck-scrollwrap\",\n            cardDeck: \"k-card-deck\",\n            cardList: \"k-card-list\",\n            card: \"k-card\",\n            cardRich: \"k-card-type-rich\",\n            cardBody: \"k-card-body\",\n            cardMedia: \"k-card-media\",\n            cardTitle: \"k-card-title\",\n            cardSubtitle: \"k-card-subtitle\",\n            cardActions: \"k-card-actions\",\n            cardActionsVertical: \"k-actions-vertical\",\n            cardActionsHorizontal: \"k-actions-horizontal\",\n            cardActionsStart: \"k-actions-start\",\n            cardActionsCenter: \"k-actions-center\",\n            cardActionsEnd: \"k-actions-end\",\n            cardActionsStretched: \"k-actions-stretched\",\n            cardAction: \"k-card-action\",\n            selected: \"k-selected\"\n        };\n\n        var ChatView = kendo.chat.ChatView = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this._list();\n\n                this._lastSender = null;\n\n                this.typingParticipants = [];\n\n                this._attachEvents();\n\n                this._scrollable();\n            },\n\n            events: [\n            ],\n\n            options: {\n                messages: {\n                    isTyping: \" is typing.\",\n                    areTyping: \" are typing.\",\n                    and: \" and \"\n                }\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this._scrollDraggable) {\n                    this._scrollDraggable.destroy();\n                }\n\n                this.element.empty();\n                this.element.off(NS);\n\n                this.list = null;\n                this._lastSender = null;\n            },\n\n            _list: function() {\n                var viewStyles = ChatView.styles;\n\n                this.element\n                    .addClass(viewStyles.messageList)\n                    .attr(\"role\", \"log\")\n                    .attr(\"aria-label\", this.options.messages.messageListLabel);\n\n                this.list = $(\"<div>\")\n                    .addClass(viewStyles.messageListContent)\n                    .appendTo(this.element);\n            },\n\n            _attachEvents: function() {\n                var styles = ChatView.styles;\n\n                this.element\n                    .on(\"click\" + NS, this._listClick.bind(this))\n                    .on(\"click\" + NS, DOT + styles.message, this._messageClick.bind(this))\n                    .on(\"click\" + NS, DOT + styles.suggestedAction, this._suggestedActionClick.bind(this))\n                    .on(\"click\" + NS, DOT + styles.cardAction + SPACE + DOT + styles.button, this._cardActionClick.bind(this));\n\n                this.element.on(\"keydown\" + NS, DOT + styles.suggestedAction, this._suggestedActionKeydown.bind(this));\n            },\n\n            _scrollable: function() {\n                var viewStyles = ChatView.styles;\n\n                this.element\n                    .on(\"click\" + NS, DOT + viewStyles.cardDeckScrollWrap + SPACE + DOT + viewStyles.button, this._scrollButtonClick.bind(this));\n            },\n\n            _scrollButtonClick: function(e) {\n                var viewStyles = ChatView.styles;\n                var button = $(e.currentTarget);\n                var scrollToLeft = button.find(`${DOT + viewStyles.buttonIcon}[class*=${viewStyles.scrollButtonIconLeft}]`).length !== 0;\n                var scrollContainer = button.siblings(DOT + viewStyles.cardDeck);\n                var lastCard = scrollContainer.find(DOT + viewStyles.card).last();\n                var cardWidth = lastCard.outerWidth(true);\n\n                if (scrollToLeft) {\n                    kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) - cardWidth);\n                } else {\n                    kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) + cardWidth);\n                }\n            },\n\n            getTemplate: function(templateName) {\n                return kendo.chat.getTemplate(templateName);\n            },\n\n            getComponent: function(type) {\n               return kendo.chat.getComponent(type);\n            },\n\n            renderMessage: function(message, sender) {\n                if (!message.timestamp) {\n                    message.timestamp = new Date();\n                }\n\n                if (!message.text) {\n                    message.text = \"\";\n                }\n\n                var bubbleElement = this._renderTemplate(message.type, message);\n\n                this._renderBubble(message.type, bubbleElement, sender);\n\n                if (message.type == \"typing\") {\n                    if (this.typingParticipants.length > 0) {\n                        this._removeTypingParticipant(sender);\n                    }\n                } else {\n                    this._lastSender = sender.id;\n                }\n            },\n\n            renderSuggestedActions: function(suggestedActions) {\n                this._removeSuggestedActions();\n\n                var element = this._renderTemplate(\"suggestedAction\", { suggestedActions: suggestedActions });\n\n                this.list.append(element);\n\n                this._scrollToBottom();\n            },\n\n            renderAttachments: function(options) {\n                var wrapper = this._renderAttachmentWrapper(options.attachmentLayout);\n                var cardContainer = options.attachmentLayout === \"carousel\" ? wrapper.find(DOT + ChatView.styles.cardDeck) : wrapper;\n                var attachments = options.attachments;\n\n                if (!attachments.length) {\n                    return;\n                }\n\n                for (var i = 0; i < attachments.length; i++) {\n                    var cardElement = this._renderTemplate(attachments[i].contentType, attachments[i].content);\n\n                    cardContainer.append(cardElement);\n                }\n\n                this._removeSuggestedActions();\n                this._removeTypingIndicator();\n\n                this.list.append(wrapper);\n\n                this._lastSender = null;\n            },\n\n            renderComponent: function(type) {\n                var componentType = this.getComponent(type);\n                var component = new componentType({}, this);\n\n                this.list.append(component.element);\n\n                this._scrollToBottom();\n            },\n\n            _renderAttachmentWrapper: function(layout) {\n                var viewStyles = ChatView.styles;\n                var wrapper = $(\"<div>\");\n\n                if (layout === \"carousel\") {\n                    wrapper.addClass(viewStyles.cardDeckScrollWrap);\n\n                    var buttonLeft = this._renderScrollButton(viewStyles.scrollButtonIconLeft);\n                    wrapper.append(buttonLeft);\n\n                    wrapper.append($(\"<div>\").addClass(viewStyles.cardDeck));\n\n                    var buttonRight = this._renderScrollButton(viewStyles.scrollButtonIconRight);\n                    wrapper.append(buttonRight);\n                } else {\n                    wrapper.addClass(viewStyles.cardList);\n                }\n\n                return wrapper;\n            },\n\n            _renderScrollButton: function(directionClass) {\n                var viewStyles = ChatView.styles;\n\n                return $(\"<button>\")\n                    .addClass(viewStyles.button)\n                    .addClass(viewStyles.buttonDefaults)\n                    .addClass(viewStyles.iconButton)\n                    .append(kendo.html.renderIcon({ icon: directionClass, iconClass: viewStyles.buttonIcon }));\n            },\n\n            _removeSuggestedActions: function() {\n                this.list.find(DOT + ChatView.styles.suggestedActions).remove();\n            },\n\n            _listClick: function(e) {\n                var styles = ChatView.styles;\n                var targetElement = $(e.target);\n\n                if (targetElement.hasClass(styles.message) || targetElement.parents(DOT + styles.message).length) {\n                    return;\n                }\n\n                this._clearSelection();\n            },\n\n            _messageClick: function(e) {\n                this._clearSelection();\n\n                $(e.currentTarget).addClass(ChatView.styles.selected);\n            },\n\n            _suggestedActionClick: function(e) {\n                var text = $(e.target).data(\"value\") || \"\";\n\n                this.trigger(\"actionClick\", { text: text });\n\n                this._removeSuggestedActions();\n            },\n\n            _suggestedActionKeydown: function(e) {\n                if (e.keyCode === kendo.keys.SPACEBAR || e.keyCode === kendo.keys.ENTER) {\n                    this._suggestedActionClick(e);\n                }\n            },\n\n            _cardActionClick: function(e) {\n                var text = $(e.target).data(\"value\") || \"\";\n\n                this.trigger(\"actionClick\", { text: text });\n            },\n\n            _renderBubble: function(messageType, bubbleElement, sender) {\n                this._removeSuggestedActions();\n                this._removeTypingIndicator();\n\n                var group = this._getMessageGroup(sender, messageType);\n\n                this._appendToGroup(group, bubbleElement, messageType);\n\n                this._scrollToBottom();\n            },\n\n            _renderTemplate: function(type, options) {\n                var componentType = this.getComponent(type);\n                var element;\n\n                if (componentType) {\n                    var component = new componentType(options, this);\n\n                    element = component.element;\n                } else {\n                    var template = this.getTemplate(type);\n                    var templateOptions = extend(true, {}, options, { styles: ChatView.styles });\n\n                    element = $(template(templateOptions));\n                }\n\n                return element;\n            },\n\n            _getMessageGroup: function(sender, messageType) {\n                var viewStyles = ChatView.styles;\n                var template = this._getMessageGroupTemplate(sender, messageType);\n                var appendTarget = messageType == \"typing\" ? this.element : this.list;\n                var group;\n\n                if (sender.id === this._lastSender && this._lastSender !== null && messageType !== \"typing\") {\n                    group = this.list.find(DOT + viewStyles.messageGroup).last();\n\n                    if (group.length) {\n                        return group;\n                    }\n                }\n\n                return $(template({ text: sender.name, url: sender.iconUrl, styles: viewStyles })).appendTo(appendTarget);\n            },\n\n            _getMessageGroupTemplate: function(sender, messageType) {\n                var isOwnMessage = sender.id === this.options.user.id;\n                var template = isOwnMessage ?\n                    SELF_MESSAGE_GROUP_TEMPLATE :\n                    MESSAGE_GROUP_TEMPLATE;\n\n                if (messageType == \"typing\") {\n                    template = TYPING_INDICATOR_TEMPLATE;\n                }\n\n                return template;\n            },\n\n            _appendToGroup: function(group, messageElement, messageType) {\n                var viewStyles = ChatView.styles;\n                var children = group.find(DOT + viewStyles.message);\n                var childrenCount = children.length;\n                var indicator = this.element.find(DOT + viewStyles.typingIndicator);\n\n                if (indicator.length && messageType == \"typing\") {\n                    return;\n                }\n\n                messageElement.addClass(childrenCount === 0 ? viewStyles.only : viewStyles.last);\n\n                children.filter(DOT + viewStyles.only)\n                    .removeClass(viewStyles.only)\n                    .addClass(viewStyles.first);\n\n                children.filter(DOT + viewStyles.last)\n                    .removeClass(viewStyles.last)\n                    .addClass(viewStyles.middle);\n\n                group.append(messageElement);\n            },\n\n            _renderTypingIndicator: function(sender) {\n                var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n                    indicatorList,\n                    participants;\n\n                this._addTypingParticipant(sender);\n\n                if (indicator.length) {\n                    participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n                    indicatorList = indicator.find(DOT + viewStyles.author).first();\n                    indicatorList.text(participants);\n\n                } else {\n                    $(TYPING_INDICATOR_TEMPLATE({\n                        text: sender.name + this.options.messages.isTyping,\n                        styles: viewStyles\n                    })).appendTo(this.element);\n                }\n\n                this._scrollToBottom();\n            },\n\n            _addTypingParticipant: function(sender) {\n                var found = false;\n                for (var i = 0; i < this.typingParticipants.length; i += 1) {\n                    if (this.typingParticipants[i].id == sender.id) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    this.typingParticipants.push(sender);\n                }\n            },\n\n            _removeTypingParticipant: function(sender) {\n                var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n                    indicatorList,\n                    participants;\n\n                if (indicator.length) {\n                    for (var i = 0; i < this.typingParticipants.length; i += 1) {\n                        if (this.typingParticipants[i].id == sender.id) {\n                            this.typingParticipants.splice(i, 1);\n                        }\n                    }\n\n                    participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n                    if (participants === \"\") {\n                        indicator.remove();\n                    } else {\n                        indicatorList = indicator.find(DOT + viewStyles.author).first();\n                        indicatorList.text(participants);\n                    }\n                }\n            },\n\n            _composeTypingParticipantsText: function(participants) {\n                var messages = this.options.messages,\n                    typingAction = participants.length == 1 ? messages.isTyping : messages.areTyping,\n                    typingText = \"\";\n\n                if (participants.length === 0) {\n                    return typingText;\n                }\n\n                typingText = this.typingParticipants.map(function(author) {\n                    return author.name;\n                }).join(', ').replace(/,(?!.*,)/gmi, messages.and.trimRight()) + typingAction;\n\n                return typingText;\n            },\n\n            _removeTypingIndicator: function() {\n                var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble);\n\n                if (indicator.length) {\n                    this.typingParticipants = [];\n                    indicator.remove();\n                }\n            },\n\n            _clearSelection: function() {\n                var selectedClass = ChatView.styles.selected;\n\n                this.element.find(DOT + selectedClass).removeClass(selectedClass);\n            },\n\n            _scrollToBottom: function() {\n                this.element.scrollTop(this.element.prop(\"scrollHeight\"));\n            }\n        });\n\n        extend(true, ChatView, { styles: viewStyles });\n\n    })(window.kendo.jQuery);\n\n    var __meta__ = {\n        id: \"chat\",\n        name: \"Chat\",\n        category: \"web\",\n        description: \"The Chat component.\",\n        depends: [ \"core\", \"draganddrop\", \"html.button\" ]\n    };\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n\n        var chatStyles = {\n            wrapper: \"k-chat\",\n            canvas: \"k-chat-canvas\",\n            viewWrapper: \"k-message-list\",\n            messageBoxWrapper: \"k-message-box\",\n            toolbarBoxWrapper: \"k-toolbar-box\"\n        };\n\n        var Chat = Widget.extend({\n            init: function(element, options, events) {\n                Widget.fn.init.call(this, element, options);\n\n                if (events) {\n                    this._events = events;\n                }\n\n                this._user();\n\n                this._wrapper();\n\n                this._view();\n\n                if (options && options.toolbar && options.toolbar.buttons) {\n                    this._toolbar();\n                }\n\n                this._messageBox();\n\n                kendo.notify(this);\n            },\n\n            events: [\n                \"typingStart\",\n                \"typingEnd\",\n                \"post\",\n                \"sendMessage\",\n                \"actionClick\",\n                \"toolClick\"\n            ],\n\n            options: {\n                user: {\n                    name: \"User\",\n                    iconUrl: \"\"\n                },\n                name: \"Chat\",\n                messages: {\n                    messageListLabel: \"Message list\",\n                    placeholder: \"Type a message...\",\n                    toggleButton: \"Toggle toolbar\",\n                    sendButton: \"Send message\"\n                },\n                toolbar: false\n            },\n\n            setOptions: function(options) {\n                this._setEvents(options);\n                $.extend(true, this.options, options);\n\n                if (this.toolbar && \"toolbar\" in options) {\n                    this.toolbar.destroy();\n                    this.toolbar = null;\n                }\n\n                if (this.messageBox) {\n                    this.messageBox.unbind();\n                    this.messageBox.destroy();\n                    this.messageBox = null;\n                }\n\n                this._messageBox();\n\n                if (\"toolbar\" in options) {\n                    this._resetToolbarButtons(options);\n                    this._toolbar();\n                }\n            },\n\n            _resetToolbarButtons: function(options) {\n                var toolbarBoxWrapper = this.wrapper.find(DOT + chatStyles.toolbarBoxWrapper);\n\n                if (!toolbarBoxWrapper.is(\":visible\")) {\n                    toolbarBoxWrapper.show();\n                }\n\n                if (options.toolbar && typeof options.toolbar == \"object\" && \"buttons\" in options.toolbar) {\n                    this.options.toolbar.buttons = options.toolbar.buttons;\n                }\n            },\n\n            destroy: function() {\n                if (this.view) {\n                    this.view.unbind();\n                    this.view.destroy();\n                    this.view = null;\n                }\n\n                if (this.messageBox) {\n                    this.messageBox.unbind();\n                    this.messageBox.destroy();\n                    this.messageBox = null;\n                }\n\n                if (this.toolbar) {\n                    this.toolbar.destroy();\n                    this.toolbar = null;\n                }\n\n                Widget.fn.destroy.call(this);\n            },\n\n            _user: function() {\n                this.options.user.id = kendo.guid();\n            },\n\n            getUser: function() {\n                return extend(true, {}, this.options.user);\n            },\n\n            _wrapper: function() {\n                var chatStyles = Chat.styles;\n                var options = this.options;\n                var height = options.height;\n                var width = options.width;\n                var uiElements = \"<div class='\" + chatStyles.viewWrapper + \"'></div>\" +\n                                 \"<span class='\" + chatStyles.messageBoxWrapper + \"'></span>\";\n                var toolbarElement = $(`<div class=\"${chatStyles.toolbarBoxWrapper}\" role=\"toolbar\"></div>`).hide();\n\n                this.wrapper = this.element\n                    .addClass(chatStyles.wrapper)\n                    .append(uiElements)\n                    .append(toolbarElement);\n\n                if (options.toolbar && options.toolbar.buttons && options.toolbar.buttons.length) {\n                    this.wrapper.find(DOT + chatStyles.toolbarBoxWrapper).show();\n                }\n\n                if (height) {\n                    this.wrapper.height(height);\n                }\n\n                if (width) {\n                    this.wrapper.css(\"max-width\", width);\n                }\n            },\n\n            _view: function() {\n                var that = this;\n                var chatStyles = Chat.styles;\n                var options = extend(true, {}, this.options);\n\n                var element = this.wrapper.find(DOT + chatStyles.viewWrapper + \"\");\n\n                this.view = new kendo.chat.ChatView(element, options);\n\n                this.view\n                    .bind(\"actionClick\", function(args) {\n                        that.trigger(\"actionClick\", args);\n\n                        that.postMessage(args.text);\n                    });\n            },\n\n            _messageBox: function() {\n                var that = this;\n                var chatStyles = Chat.styles;\n                var options = extend(true, {}, this.options);\n                var element = this.wrapper.find(DOT + chatStyles.messageBoxWrapper + \"\");\n\n                this.messageBox = new kendo.chat.ChatMessageBox(element, options);\n\n                this.messageBox\n                    .bind(\"typingStart\", function(args) {\n                        that.trigger(\"typingStart\", args);\n                    })\n                    .bind(\"typingEnd\", function(args) {\n                        that.trigger(\"typingEnd\", args);\n                    })\n                    .bind(\"sendMessage\", function(args) {\n                        that.trigger(\"sendMessage\", args);\n\n                        that.postMessage(args.text);\n                    })\n                    .bind(\"toggleToolbar\", function() {\n                        that.toggleToolbar();\n                    })\n                    .bind(\"focusToolbar\", function() {\n                        if (that.toolbar) {\n                            that.toolbar.focus();\n                        }\n                    });\n            },\n\n            _toolbar: function() {\n                var that = this;\n                var chatStyles = Chat.styles;\n                var options = extend(true, {}, that.options);\n                var element = that.wrapper.find(DOT + chatStyles.toolbarBoxWrapper + \"\");\n\n                that.options.toolbarId = kendo.guid();\n                element.attr(\"id\", that.options.toolbarId);\n\n                if (options.toolbar.scrollable === undefined$1) {\n                    this.options.toolbar.scrollable = options.toolbar.scrollable = true;\n                }\n\n                if (options.toolbar.toggleable === undefined$1) {\n                    this.options.toolbar.toggleable = options.toolbar.toggleable = false;\n                }\n\n                that.toolbar = new kendo.chat.ChatToolBar(element, options);\n\n                that.toolbar.bind(\"click\", function(ev) {\n                    that.trigger(\"toolClick\", {\n                        sender: that,\n                        name: ev.name,\n                        button: ev.button,\n                        messageBox: that.messageBox.input[0],\n                        originalEvent: ev.originalEvent\n                    });\n                });\n            },\n\n            postMessage: function(message) {\n                var postArgs = extend(true, {}, { text: message, type: \"message\", timestamp: new Date(), from: this.getUser() });\n\n                this.trigger(\"post\", postArgs);\n\n                this.renderMessage(postArgs, postArgs.from);\n            },\n\n            // TEST calling View renderMessage\n            renderMessage: function(message, sender) {\n                this.view.renderMessage(message, sender);\n            },\n\n            // TEST calling View renderSuggestedActions\n            renderSuggestedActions: function(suggestedActions) {\n                this.view.renderSuggestedActions(suggestedActions);\n            },\n\n            // TEST calling View renderCard\n            renderAttachments: function(options, sender) {\n                this.view.renderAttachments(options, sender);\n            },\n\n            toggleToolbar: function(skipAnimation) {\n                this.toolbar.toggle(skipAnimation);\n            },\n\n            renderUserTypingIndicator: function(sender) {\n                this.view._renderTypingIndicator(sender);\n            },\n\n            clearUserTypingIndicator: function(sender) {\n                this.view._removeTypingParticipant(sender);\n            },\n\n            removeTypingIndicator: function() {\n                this.view._removeTypingIndicator();\n            }\n        });\n\n        kendo.ui.plugin(Chat);\n\n        extend(true, Chat, { styles: chatStyles });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}